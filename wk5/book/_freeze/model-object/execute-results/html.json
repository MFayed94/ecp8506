{
  "hash": "2cba8cf2c3fb299ebd00e44b4265cf65",
  "result": {
    "engine": "knitr",
    "markdown": "# The model object\n\n\n\n\n\n\n\n\n\n\nThis chapter introduces the ___model object___. \n\n- The model object contains all information about _the model_\n  - Compartments\n  - ODE\n  - Algebraic relationships\n  - Random effects\n  - Etc\n- The model object is what you use in R to \n  - Query the model\n  - Run simulations\n  \n## `mread()`\n\nLoad a model from a model specification file using `mread()`. \n\n- Don't worry for now what is in that file; we'll show you how to create it\n- Your model can have any extension\n\n### Syntax to load a model \n\n__Provide the complete path to the file__\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- mread(\"book-model/test.mod\")\n```\n:::\n\n\n\n\n\n__Provide the directory as an argument__\n\n- Assumes you are keeping all simulation code in the `models` directory\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- mread(\"test.mod\", project = \"book-model\")\n```\n:::\n\n\n\n\n\n__Set `project` as an option__\n\n- All my models are in this directory _for this project_\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(mrgsolve.project = \"book-model\")\n\nmod <- mread(\"test.mod\")\n```\n:::\n\n\n\n\n__Update on load__\n\n- Set the simulation end time to `240`\n- Set (increase) ODE solver relative tolerance to `1e-5`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- mread(\"book-model/test.mod\", end = 240, rtol = 1e-5)\n```\n:::\n\n\n\n\n\n### Read and cache\n\nUse `mread_cache()` to build and cache the model. \n\nLoad it once\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- mread_cache(\"book-model/test.mod\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nBuilding test_mod ... done.\n```\n\n\n:::\n:::\n\n\n\n\nLoad it again\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- mread_cache(\"book-model/test.mod\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading model from cache.\n```\n\n\n:::\n:::\n\n\n\n\nLook at the `soloc` argument; this will let you place the cached model in \na stable location. \n\n## `modlib()`\n\nUse the `modlib()` function to load a model from an internal model library.\n\n- Pre-coded models\n- Sourced from inside the `mrgsolve` installation directory\n- Great way to get models to experiment with\n  - But I rarely use these for production work\n\nThis code will load a 1-compartment PK model. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- modlib(\"pk1\")\n```\n:::\n\n\n\n \nList out the location of he model library\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodlib()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/Users/kyleb/renv/renv/library/R-4.4/aarch64-apple-darwin20/mrgsolve/models\"\n```\n\n\n:::\n:::\n\n\n\n\nSo the `modlib()` function is equivalent to \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- mread(\"pk1\", project = modlib())\n```\n:::\n\n\n\n\nFind out what models are in the library\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?modlib\n```\n:::\n\n\n\n\n## Overview\n\nYou can print `mod` to the R console and see what's going on \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\n-----------------  source: test.mod  -----------------\n\n  project: /Users/kyleb/git...ok/book-model\n  shared object: test_mod-so-3fd93c203d08 \n\n  time:          start: 0 end: 24 delta: 1\n                 add: <none>\n\n  compartments:  GUT CENT [2]\n  parameters:    CL V TVKA [3]\n  captures:      CP [1]\n  omega:         2x2 \n  sigma:         0x0 \n\n  solver:        atol: 1e-08 rtol: 1e-08 maxsteps: 20k\n------------------------------------------------------\n```\n\n\n:::\n:::\n\n\n\n\nor summarize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nModel: test_mod\n- Parameters: [3]\n  CL, V, TVKA\n- Compartments: [2]\n  GUT, CENT\n- Captured: [1]\n  CP\n- Outputs: [3]\n  GUT, CENT, CP\n```\n\n\n:::\n:::\n\n\n\n\nor see the model code\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsee(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nModel file:  test.mod \n$PARAM CL = 1, V = 20, TVKA = 1.2\n\n$OMEGA 0.1 0.2\n\n$PKMODEL cmt = \"GUT CENT\", depot = TRUE\n\n$MAIN\ndouble KA = TVKA + ETA(1);\n\n$TABLE\ncapture CP = CENT/V;\n```\n\n\n:::\n:::\n\n\n\n\n\n## Parameters\n\nQuery the parameter list with `param()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparam(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n Model parameters (N=3):\n name value . name value\n CL   1     | V    20   \n TVKA 1.2   | .    .    \n```\n\n\n:::\n:::\n\n\n\n\nThis output shows you there are 3 parameters in the model \n\n- `CL`, with nominal value 1\n- `V`, with nominal value 20\n- `KA`, with nominal value 1\n\nNote that each parameter has\n\n- A **name**(e.g. `CL`)\n- A **value** (must be _numeric_) \n\n\n\n## Compartments\n\nWe'll keep working with the model object we loaded in the previous section. \n\nModels also have compartments. Like parameters, compartments have \n\n- A **name**\n- A **value** \n\nCompartments also have a ___number___ \n\nQuery the compartment list with `init()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninit(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n Model initial conditions (N=2):\n name       value . name      value\n CENT (2)   0     | GUT (1)   0    \n```\n\n\n:::\n:::\n\n\n\n\nNotice that each compartment has a number associated with it. This is mainly\nused for dosing. But there is a model syntax that allows you to write a \nmodel in terms of named compartments (e.g. `A(2)` or `F1`). \n\n## Random effects\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrevar(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$omega\n$...\n    [,1] [,2]\n1:   0.1  0.0\n2:   0.0  0.2\n\n\n$sigma\nNo matrices found\n```\n\n\n:::\n:::\n\n\n\n\n\n## Update the model object\n\nWe frequently want to _change_ or _update_ the settings in the model object. \n\nUpdates can be made through `update()`. To change the simulation time grid\nwe might use\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- update(mod, end = 240, delta = 2)\n```\n:::\n\n\n\n\nto change the simulation end time to `240` hours and the output time interval\nto every 2 hours. This results in a new model object with updated settings that \nwill be in place whenever you simulate from `mod` until you make more changes. \n\nYou can also update on model read\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- mread(\"model.mod\", end = 240, delta = 2)\n```\n:::\n\n\n\n\nor at the time of simulation \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nout <- mod %>% mrgsim(end = 240, delta = 2)\n```\n:::\n\n\n\n\nAll of these update mechanisms execute updates to the model object. But only \nwhen we save the results back to `mod` are the updates persistent in the model.\n\n__What else can I update?__\n\n- Time\n  - `start`, `end`, `delta`, `add`\n- Parameters and compartment initial values\n- Solver settings\n  -  `atol`, `rtol`\n  -  `hmax`, `maxsteps`, `mxhnil`, `ixpr`\n  - Usually changing `rtol`, `atol`, and maybe `hmax`\n- `$OMEGA`, `$SIGMA`\n- `tscale` (rescale the output time)\n- `digits`\n\n__Parameter update__\n\nTo update parameters, use `param()`. More on this in @sec-parameters \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- param(mod, CL = 2)\n```\n:::\n\n\n\n\n\n\n\n\n## Advanced\n\n__Get the value of a parameter or setting__\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod$CL\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\nmod$end\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 240\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n__Extract all parameters as a list__\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.list(param(mod))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$CL\n[1] 1\n\n$V\n[1] 20\n\n$TVKA\n[1] 1.2\n```\n\n\n:::\n:::\n\n\n\n\nExtract the value of one parameter\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod$CL\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\n\n\n__Extract everything__\n\nYou can get the model object contents as a plain list\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl <- as.list(mod)\n```\n:::\n\n\n\n\n\n::: {.callout-note collapse=\"true\" appearance=\"minimal\"}\n# See the output\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$npar\n[1] 3\n\n$neq\n[1] 2\n\n$pars\n[1] \"CL\"   \"V\"    \"TVKA\"\n\n$covariates\ncharacter(0)\n\n$param_tag\n[1] name tag \n<0 rows> (or 0-length row.names)\n\n$cmt\n[1] \"GUT\"  \"CENT\"\n\n$param\n$param$CL\n[1] 1\n\n$param$V\n[1] 20\n\n$param$TVKA\n[1] 1.2\n\n\n$init\n$init$GUT\n[1] 0\n\n$init$CENT\n[1] 0\n\n\n$omega\n$omega$...\n     [,1] [,2]\n[1,]  0.1  0.0\n[2,]  0.0  0.2\n\n\n$sigma\nnamed list()\n\n$fixed\nlist()\n\n$model\n[1] \"test_mod\"\n\n$project\n[1] \"/Users/kyleb/git/kylebaron/intro-to-mrgsolve-uofm/book/book-model\"\n\n$soloc\n[1] \"/private/var/folders/zv/v6tkdhrn1_bb1ndrc0c0j31w0000gp/T/RtmpXovInx/mrgsolve-so-1.5.1.9003-aarch64-apple-darwin20/test_mod\"\n\n$sodll\n[1] \"/private/var/folders/zv/v6tkdhrn1_bb1ndrc0c0j31w0000gp/T/RtmpXovInx/mrgsolve-so-1.5.1.9003-aarch64-apple-darwin20/test_mod/test_mod-so-3fd93c203d08.so\"\n\n$cfile\n[1] \"/Users/kyleb/git/kylebaron/intro-to-mrgsolve-uofm/book/book-model/test.mod\"\n\n$shlib\n$shlib$date\n[1] \"\"\n\n$shlib$par\n[1] \"CL\"   \"V\"    \"TVKA\"\n\n$shlib$cmt\n[1] \"GUT\"  \"CENT\"\n\n$shlib$compiled\n[1] TRUE\n\n$shlib$version\n[1] '1.5.1.9003'\n\n$shlib$source\n[1] \"/private/var/folders/zv/v6tkdhrn1_bb1ndrc0c0j31w0000gp/T/RtmpXovInx/mrgsolve-so-1.5.1.9003-aarch64-apple-darwin20/test_mod/test_mod-mread-source.cpp\"\n\n$shlib$neq\n[1] 2\n\n$shlib$covariates\ncharacter(0)\n\n$shlib$param_tag\n[1] name tag \n<0 rows> (or 0-length row.names)\n\n$shlib$cpp_variables\n     type var context\n1  double  KA    main\n2 capture  CP   table\n\n$shlib$include\ncharacter(0)\n\n$shlib$nm_import\ncharacter(0)\n\n$shlib$md5\n/Users/kyleb/git/kylebaron/intro-to-mrgsolve-uofm/book/book-model/test.mod \n                                        \"c00a2e38f610c8f608806fcbbfd113c3\" \n\n$shlib$call_event\n[1] FALSE\n\n\n$start\n[1] 0\n\n$end\n[1] 240\n\n$delta\n[1] 2\n\n$add\nnumeric(0)\n\n$capture\n  CP \n\"CP\" \n\n$out_cap\n[1] \"CP\"\n\n$out_cmt\n[1] \"GUT\"  \"CENT\"\n\n$random\n$random$omega\n[1] \"...\"\n\n$random$sigma\ncharacter(0)\n\n$random$omega_labels\n$random$omega_labels[[1]]\n[1] \".\" \".\"\n\n\n$random$sigma_labels\nnamed list()\n\n\n$code\n [1] \"$PARAM CL = 1, V = 20, TVKA = 1.2\"        \n [2] \"\"                                         \n [3] \"$OMEGA 0.1 0.2\"                           \n [4] \"\"                                         \n [5] \"$PKMODEL cmt = \\\"GUT CENT\\\", depot = TRUE\"\n [6] \"\"                                         \n [7] \"$MAIN\"                                    \n [8] \"double KA = TVKA + ETA(1);\"               \n [9] \"\"                                         \n[10] \"$TABLE\"                                   \n[11] \"capture CP = CENT/V;\"                     \n[12] \"\"                                         \n[13] \"\"                                         \n\n$details\n$details$data\n# A tibble: 0 × 0\n\n$details$embedded\n[1] TRUE\n\n\n$nm_import\ncharacter(0)\n\n$cpp_variables\n     type var context\n1  double  KA    main\n2 capture  CP   table\n\n$atol\n[1] 1e-08\n\n$rtol\n[1] 1e-08\n\n$ss_rtol\n[1] 1e-08\n\n$ss_atol\n[1] 1e-08\n\n$maxsteps\n[1] 20000\n\n$hmin\n[1] 0\n\n$hmax\n[1] 0\n\n$envir\n<environment: 0x10cf6a8d0>\n\n$plugins\n[1] \"base\"\n\n$digits\n[1] -1\n\n$request\n[1] \"(all)\"\n\n$tscale\n[1] 1\n\n$mindt\n[1] 2.220446e-15\n\n$preclean\n[1] FALSE\n\n$debug\n[1] FALSE\n\n$verbose\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}