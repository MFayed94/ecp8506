{
  "hash": "ababc5a9b0d8977dbe845c974a46215b",
  "result": {
    "engine": "knitr",
    "markdown": "# Event objects\n\n\n\n\n\n\n\n\n\nEvent objects are quick ways to generate an intervention or\na sequence of interventions to apply to your model. \n\nThese are like quick and easy data sets. \n\n\n## Create and event object\n\n\nUse `ev()` and pass NMTRAN data names in lower case. \n\nFor example\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nev(amt = 100, ii = 12, addl = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEvents:\n  time amt ii addl cmt evid\n1    0 100 12    2   1    1\n```\n\n\n:::\n:::\n\n\n\n\nYou can pass\n\n- `time` time of the event\n- `evid` event ID\n  - 1 for dose\n  - 2 for other type\n  - 3 for reset\n  - 4 for dose and reset\n  - 8 for replace\n- `amt` dose amount\n- `cmt` compartment for the intervention\n  - usually the compartment number\n  - can be character compartment name\n- `ii` inter-dose interval\n- `addl` additional doses (or events)\n  - `total` alternative for total number of doses\n- `ss` advance to steady-state?\n  - 0 don't advance to steady-state\n  - 1 advance to steady-state\n  - 2 irregular steady-state\n- `rate` give the dose zero-order with this rate\n  - `tinf` alternative for infusion time \n\n\nSee `?ev` for additional details. \n\n## Invoke event object\n\n\n### Inline\n\nPipe the model object to `ev()` then simulate.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- house(outvars = \"GUT,CP,RESP\", end = 24)\n\nmod %>% ev(amt = 100) %>% mrgsim() %>% plot()\n```\n\n::: {.cell-output-display}\n![](event-object_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n### As object\n\nYou can save the event object out and pass it in. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ne <- ev(amt = 100) \n\nmod %>% ev(e) %>% mrgsim() %>% plot()\n```\n:::\n\n\n\n\nThis is a good idea when you want to create an intervention \nand apply it in several different simulation scenarios.\n\n\nAlternatively, you can pass it in as the `events` argument\nfor `mrgsim()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod %>% mrgsim(events = e) %>% plot()\n```\n:::\n\n\n\n\n## Combining event objects \n\nWe can create more complex interventions from several\nsimpler event objects. \n\n### Simple combination\n\nUse the `c()` operator to concatenate. \n\nFor 100 mg loading dose followed by 50 mg daily x6\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload <- ev(amt = 100) \nmaintenance <- ev(time = 24, amt = 50, ii = 24, addl = 5)\n\nc(load, maintenance)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEvents:\n  time amt cmt evid ii addl\n1    0 100   1    1  0    0\n2   24  50   1    1 24    5\n```\n\n\n:::\n:::\n\n\n\n\n### Sequence\n\nWe can make this simpler by putting these in a sequence. Here is \n100 mg daily for a week, followed by 50 mg daily for the rest of the month\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- ev(amt = 100, ii = 24, total =  7) \nb <- ev(amt = 50,  ii = 24, total = 21)\n\nseq(a,b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEvents:\n  time amt ii addl cmt evid\n1    0 100 24    6   1    1\n2  168  50 24   20   1    1\n```\n\n\n:::\n:::\n\n\n\n\n\n### Expand into multiple subjects\n\nPass an event object to `ev_rep()` with the IDs you want\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(a,b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEvents:\n  time amt ii addl cmt evid\n1    0 100 24    6   1    1\n2  168  50 24   20   1    1\n```\n\n\n:::\n\n```{.r .cell-code}\nseq(a,b) %>% ev_rep(1:3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  ID time amt ii addl cmt evid\n1  1    0 100 24    6   1    1\n2  1  168  50 24   20   1    1\n3  2    0 100 24    6   1    1\n4  2  168  50 24   20   1    1\n5  3    0 100 24    6   1    1\n6  3  168  50 24   20   1    1\n```\n\n\n:::\n:::\n\n\n\n\n\n### Combine into a data set\n\nUse `as_data_set` with `ev_rep()` to create a data set\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc <- seq(a,b) \n\nas_data_set(\n  a %>% ev_rep(1:2), \n  b %>% ev_rep(1:2), \n  c %>% ev_rep(1:2)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  ID time amt ii addl cmt evid\n1  1    0 100 24    6   1    1\n2  2    0 100 24    6   1    1\n3  3    0  50 24   20   1    1\n4  4    0  50 24   20   1    1\n5  5    0 100 24    6   1    1\n6  5  168  50 24   20   1    1\n7  6    0 100 24    6   1    1\n8  6  168  50 24   20   1    1\n```\n\n\n:::\n:::\n\n\n\n\n## Modifying event objects\n\nYou can use a selection of the tidyverse to modify event objects\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsingle <- ev(amt = 100) \n\nss <- mutate(single, ii = 24, ss = 1)  \n\nss\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEvents:\n  time amt ii ss cmt evid\n1    0 100 24  1   1    1\n```\n\n\n:::\n:::\n\n\n\n\n- `mutate()`\n- `select()`\n- `filter()`\n\n## Rx specification\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nev_rx(\"100 mg x1 then 50 q12h x 10 at 24\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEvents:\n  time amt ii addl cmt evid\n1    0 100  0    0   1    1\n2    0  50 12    9   1    1\n```\n\n\n:::\n:::\n",
    "supporting": [
      "event-object_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}