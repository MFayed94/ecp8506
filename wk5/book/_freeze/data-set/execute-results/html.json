{
  "hash": "dd8395e3a401801be43c9f192b9a21ff",
  "result": {
    "engine": "knitr",
    "markdown": "# Data sets\n\n\n\n\n\n\n\n\n\n\n`mrgsolve` will receive data sets just like those you create\nfor NONMEM, but in `data.frame` format. \n\nNaming is similar to what we learned in the previous chapter for \nevent objects, but you can use upper or lower case naming. \n\nExample\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read.csv(here(\"data/derived/analysis3.csv\"), na = '.')\nhead(data, n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   C NUM ID TIME SEQ CMT EVID AMT     DV   AGE    WT     HT   EGFR ALB   BMI\n1 NA   1  1 0.00   0   1    1   5  0.000 28.03 55.16 159.55 114.45 4.4 21.67\n2 NA   2  1 0.61   1   2    0  NA 61.005 28.03 55.16 159.55 114.45 4.4 21.67\n3 NA   3  1 1.15   1   2    0  NA 90.976 28.03 55.16 159.55 114.45 4.4 21.67\n  SEX    AAG  SCR   AST   ALT CP TAFD  TAD LDOS MDV BLQ PHASE STUDYN DOSE SUBJ\n1   1 106.36 1.14 11.88 12.66  0 0.00 0.00    5   1   0     1      1    5    1\n2   1 106.36 1.14 11.88 12.66  0 0.61 0.61    5   0   0     1      1    5    1\n3   1 106.36 1.14 11.88 12.66  0 1.15 1.15    5   0   0     1      1    5    1\n           USUBJID        STUDY    ACTARM   RF\n1 101-DEMO-0010001 101-DEMO-001 DEMO 5 mg norm\n2 101-DEMO-0010001 101-DEMO-001 DEMO 5 mg norm\n3 101-DEMO-0010001 101-DEMO-001 DEMO 5 mg norm\n```\n\n\n:::\n:::\n\n\n\n\nData sets are passed through the `data_set` pipe function\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod %>% \n  data_set(data) %>%\n  mrgsim()\n```\n:::\n\n\n\n\nor just pass it in as the `data` argument to `mrgsim()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmrgsim(mod, data = data)\n```\n:::\n\n\n\n\n\n## Specifics\n\n- Lower or upper case names may be used for NMTRAN data items, but \n  they must be consistent \n  - Good: `AMT`, `CMT`, `TIME`\n  - Also good: `amt`, `cmt`, `time`\n  - Bad: `amt`, `CMT`, `time`\n\n- Columns with special handling\n  - `ID`\n  - `AMT`\n  - `CMT`\n  - `EVID`\n  - `II`\n  - `ADDL`\n  - `RATE`\n  - `SS`\n\n- Required columns for most applications\n  - `ID`\n  - `TIME`\n  - `CMT` \n\n- Some columns which are commonly used for NONMEM data sets mean \n  nothing in `mrgsolve` context\n  - `C`\n  - `MDV`\n  - `DV`\n\n- Columns that are not numeric will be dropped before simulating\n\n- Use `uctran()` and `lctran()` to convert names\n\n- Data sets can contain mix of observation and event records\n\n- Data sets can have multiple IDs with any design\n  - NONMEM approach for when to count \"new\" IDs\n\n- Unlimited flexibility in creating data sets\n  - But we have some helpful tools when creating simulation \n    skeletons on the fly\n\n\n\n\n## Observation records\n\nData sets may or may not include observation records (EVID=0). \n\n- When there is **at least one** observation record anywhere in the \n  data set, `mrgsolve` will only take observations from the \n  input data. \n- When there **no** observation records in the data set, `mrgsolve` will\n  insert observations according to the time grid specification in the \n  model object. \n\nThis makes it easy to pass in a _clinical_ data set, with arbitrary \"real\"\nobservation times. \n\nOr, if you are conducting _de novo_ simulations, make a data set with only \ndosing or event records and let `mrgsolve` fill in the observations for you\nafter you customize the time grid. \n\n## Building input data sets\n\nWe will look at some convenience functions that help you create input data sets\nthat _don't_ include observation records. \n\n\n### Expand\n\nThe `ev_expand()` and `evd_expand()` functions like `base::expand.grid()`: it \nwill make all combinations of your inputs, filling in missing required columns\nwith sensible defaults. \n\nTo simulate 2 subjects at each of 3 doses\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nevd_expand(amt = c(100, 300, 1000), ii = 24, total = 7, ID = 1:2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  ID TIME  AMT II ADDL CMT EVID\n1  1    0  100 24    6   1    1\n2  2    0  300 24    6   1    1\n3  3    0 1000 24    6   1    1\n4  4    0  100 24    6   1    1\n5  5    0  300 24    6   1    1\n6  6    0 1000 24    6   1    1\n```\n\n\n:::\n:::\n\n\n\n\n- Arguments are lowercase\n- The function fills in \n  - `TIME`, `CMT` and `EVID` for you; be sure to override this if you want \n    something else\n- Only one row for each subject\n- The result is a data.frame\n\n### From events\n\nPass several event objects to `as_data_set()`. This allows much more \nflexibility. Let's do an example:\n\nWe want to simulate 2 subjects at each of 3 regimens: \n\n- a: 100 mg daily for 28 days\n- b: 50 mg daily for 14 days followed by 100 mg daily for 14 days\n- c: 50 mg BID for 14 days followed by 100 mg daily for 14 days\n\nFirst, make an event object for each\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- ev(amt = 100, ii = 24, total = 28)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nb1 <- ev(amt = 50, ii = 24, total = 14)\nb2 <- mutate(a, total = 28)\nb <- ev_seq(b1, b2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nc1 <- ev(amt = 50, ii = 12, total = 28)\nc2 <- b2\nc <- ev_seq(c1, c2)\n```\n:::\n\n\n\n\nCheck the outputs\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEvents:\n  time amt ii addl cmt evid\n1    0 100 24   27   1    1\n```\n\n\n:::\n\n```{.r .cell-code}\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEvents:\n  time amt ii addl cmt evid\n1    0  50 24   13   1    1\n2  336 100 24   27   1    1\n```\n\n\n:::\n\n```{.r .cell-code}\nc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEvents:\n  time amt ii addl cmt evid\n1    0  50 12   27   1    1\n2  336 100 24   27   1    1\n```\n\n\n:::\n:::\n\n\n\n\nThe `as_data_set()` function will combine these into 3 different subjects, \ngiving them unique ID names names\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- as_data_set(a,b,c)\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  ID time amt ii addl cmt evid\n1  1    0 100 24   27   1    1\n2  2    0  50 24   13   1    1\n3  2  336 100 24   27   1    1\n4  3    0  50 12   27   1    1\n5  3  336 100 24   27   1    1\n```\n\n\n:::\n:::\n\n\n\n\nWe can expand the number of subjects in each intervention by using \n`ev_rep()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- as_data_set(\n  ev_rep(a, ID = 1:2), \n  ev_rep(b, ID = 1:2), \n  ev_rep(c, ID = 1:2)\n) %>% uctran()\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ID TIME AMT II ADDL CMT EVID\n1   1    0 100 24   27   1    1\n2   2    0 100 24   27   1    1\n3   3    0  50 24   13   1    1\n4   3  336 100 24   27   1    1\n5   4    0  50 24   13   1    1\n6   4  336 100 24   27   1    1\n7   5    0  50 12   27   1    1\n8   5  336 100 24   27   1    1\n9   6    0  50 12   27   1    1\n10  6  336 100 24   27   1    1\n```\n\n\n:::\n:::\n\n\n\n\n## Individual data sets\n\nAnother type of data set is `idata`. This is a data frame of individual-level\ndata for the problem. \n\n- `idata` typically has columns named for parameters\n- `idata` has only one row per subject in the problem\n- `idata` defines the number of subjects in the problem when there is no\n  (population) `data` set\n  \n\nFor example, load the `1005` model\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- modlib(\"1005\", end = 72, delta = 0.1, capture = \"WT\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required namespace: xml2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nBuilding 1005 ... done.\n```\n\n\n:::\n\n```{.r .cell-code}\nsee(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nModel file:  1005.cpp \n[ PROB ]\n1005 phase1 2 CMT like 1004 but diff. initial on V3\n\nRun \nfile.show(system.file(\"nonmem\", \"1005\", \"1005.ctl\", package = \"mrgsolve\")) \nfor equivalent NONMEM control stream. \n\n[ PKMODEL ] cmt = \"GUT CENT PERIPH\", depot = TRUE\n\n[ INPUT ] SEX = 0, WT = 70\n\n[ NMXML ] \nproject = system.file(\"nonmem\", package = \"mrgsolve\")\nrun = \"@cppstem\"\n\n[ PK ] \ndouble CL = THETA(1)*exp(ETA(1)) * pow(THETA(6),SEX) * pow(WT/70.0,THETA(7));\ndouble V2 = THETA(2)*exp(ETA(2));\ndouble KA = THETA(3)*exp(ETA(3));\ndouble Q  = THETA(4);\ndouble V3 = THETA(5);\ndouble S2 = V2;\n\n[ ERROR ] \ndouble F = CENT/S2;\ndouble Y = F*(1+EPS(1)) + EPS(2); \ndouble IPRED = F; \n\n[ CAPTURE ] \nCL Q V2 V3 KA ETA(1) ETA(2) ETA(3) IPRED\n```\n\n\n:::\n:::\n\n\n\n\nThis model has `WT` as a parameter (input covariate) as well as `TVKA`, `TVCL`, \nand  `TVV`.\n\nMake an `idata` set for sensitivity analysis on `WT`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nidata <- expand.idata(WT = runif(100, 50, 110))\n\nhead(idata)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  ID        WT\n1  1 101.70618\n2  2  84.92973\n3  3  50.73833\n4  4  79.50030\n5  5  86.58689\n6  6  86.48000\n```\n\n\n:::\n:::\n\n\n\n\nWe have two columns\n\n- `ID`\n- `WT`\n\nand `WT` is labeled as a input in the model\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_data_names(idata, mod, mode = \"inform\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nCould not find the following parameter names in `data`:\nâ€¢ SEX (input)\n```\n\n\n:::\n:::\n\n\n\n\nNotice that `SEX` is _also_ tagged as an input and the check didn't find this \ncovariate in the data set. That's ok; we're just looking at `WT` for now.\n\n\nIf we simulate one 100 mg dose with this `idata` set and no IIV \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nout <- \n  mod %>% \n  zero_re() %>% \n  idata_set(idata) %>% \n  ev(amt = 100) %>% \n  Req(WT, CL, IPRED) %>% \n  mrgsim()\n```\n:::\n\n\n\n\nwe get 100 subjects in the output, all with varying weights\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nout\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nModel:  1005 \nDim:    72200 x 5 \nTime:   0 to 72 \nID:     100 \n    ID time    CL   IPRED    WT\n1:   1  0.0 14.84 0.00000 101.7\n2:   1  0.0 14.84 0.00000 101.7\n3:   1  0.1 14.84 0.03001 101.7\n4:   1  0.2 14.84 0.05749 101.7\n5:   1  0.3 14.84 0.08263 101.7\n6:   1  0.4 14.84 0.10563 101.7\n7:   1  0.5 14.84 0.12665 101.7\n8:   1  0.6 14.84 0.14584 101.7\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(out)\n```\n\n::: {.cell-output-display}\n![](data-set_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "data-set_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}