{
  "hash": "73a242a507d16159d9aad47dbd36138f",
  "result": {
    "engine": "knitr",
    "markdown": "\n# Model specification 1 {#sec-specification-1}\n\n\n\n\n\n\n\n\n\n\nIn this chapter, we'll code up a very simple pharmacokinetic model. \nThis is just starter material to get some concepts in place. We'll \ndo more complicated stuff later (see @sec-specification-2).\n\n\n![](images/pk-model.png)\n\n\nParameters\n\n- `CL`\n- `V`\n- `KA`\n\nCompartments\n\n- `CENT`\n- `DEPOT`\n\n## Where to save your code?\n\n- You can use any file name with any extension\n- The extension you use may influence how your editor highlights and \n  indents your code\n- I use `.mod`\n\n\n## Model specification blocks\n\nModel components are coded into blocks, which are delineated by a \nspecific block syntax. You have a couple of options\n\n__NONMEM style__\n\nThese start with `$` and then the block name (`$PK`)\n\n__Bracket style__\n\nPut the block name in brackets (`[ ERROR ]`)\n\n__Upper or lower case__\n\nYou can use either:\n\n- `$error`\n- `[ pk ]`\n- etc ... they all work\n\n\n### Syntax\n\nThe \"type\" of code you write will vary from block to block. \nSometimes it is an R-like syntax and sometimes it is \n`c++` code. \n\nDon't worry if you don't know `c++`! We have taken a lot of \nthe complexity out and with a handful of exceptions, the \ncode should be pretty natural and similar to what you write\nin R. \n\nWe will show you more `c++` in chapters to come.\n\n## Base model blocks\n\n### Parameters\n\nUse the `$PARAM` block header.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n$PARAM \nCL = 1, V = 20, KA = 1.1\n```\n:::\n\n\n\n\nParameters have a **name** and a **value**, separated by `=`.\n\nParameter names can be upper or lower case. If you want punctuation, \nuse underscore `_`.\n\nParameter values must _evaluate_ to numeric.\n\nParameters can't be functions of other parameters _when writing the `$PARAM` block_. But there is a place where you can do this ...\nwe'll see this later on.\n\nMultiple parameters can go on one line, but separate by comma.\n\n\n\n### Read it in with `mread()`\n\nPoint `mread()` at your model file to\n\n- read in the model\n- see if it compiles\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- mread(here(\"model/simple.mod\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nBuilding simple_mod ... done.\n```\n\n\n:::\n:::\n\n\n\n\nWe'll learn much more about `mread()` later on, but for now we need a way \nto check if our model coding is correct.\n\n\n## Compartments\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n$PARAM \nCL = 1, V = 20, KA = 1.1\n\n$CMT DEPOT CENT\n```\n:::\n\n\n\n\nCompartments are named \n\n- Upper or lower case\n- Punctuation use `_`\n\nOrder doesn't matter, except \n\n- When putting dosing records into the data set\n- You want to use the NONMEM-style coding\n\n\n## Differential equations\n\nNow, we'll write ODE using `$DES` (or `$ODE`) block. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n$PARAM \nCL = 1, V = 20, KA = 1.1\n\n$CMT DEPOT CENT\n\n$DES\ndxdt_DEPOT = -KA * DEPOT;\ndxdt_CENT  =  KA * DEPOT - (CL/V)*CENT;\n```\n:::\n\n\n\n\nLeft hand side is `dxdt_<compartment name>`. \n\nRight hand side can reference\n\n- Compartments\n- Parameters\n- Other quantities derived in `$DES` or `$PK`\n- Other internal variables\n\nUnlike `$PARAM` and `$CMT`, this is `c++` code\n\n- Any valid `c++` code is allowed\n- Each line (statement) should end in semi-colon `;`\n\n## Derived outputs\n\nLike NONMEM, derived can be calculated in the `$ERROR` block.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n$PARAM \nCL = 1, V = 20, KA = 1.1\n\n$CMT DEPOT CENT\n\n$DES\ndxdt_DEPOT = -KA * DEPOT;\ndxdt_CENT  =  KA * DEPOT - (CL/V)*CENT;\n\n$ERROR\ndouble CP = CENT/V;\n```\n:::\n\n\n\n\nLike `$DES`, this block must be valid `c++` code. \n\nHere we have created a new variable called `CP`, which is \nthe amount in the central compartment divided by the \ncentral volume of distribution. \n\nWhen we create a new variable, we must declare its `type`. \nUse `double` for a floating point number. \n\n## Capture outputs into the simulated data\n\n`mrgsolve` has a `$CAPTURE` block that works like \nNONMEM's `$TABLE`. Just list the names you want copied\ninto the output.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n$PARAM \nCL = 1, V = 20, KA = 1.1\n\n$CMT DEPOT CENT\n\n$DES\ndxdt_DEPOT = -KA * DEPOT;\ndxdt_CENT  =  KA * DEPOT - (CL/V)*CENT;\n\n$ERROR\ndouble CP = CENT/V;\n\n$CAPTURE CP\n```\n:::\n\n\n\n\nRather than putting stuff in `$CAPTURE`, try declaring with type `capture`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n$ERROR\ncapture CP = CENT/V;\n```\n:::\n\n\n\n\n`capture` is identical to type `double`, but tells `mrgsolve` to include this \nitem in the simulated output.\n\n\nA little-use feature is renaming items in `$CAPTURE`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n$ERROR \ndouble DV = CENT/V;\n\n$CAPTURE CP = DV\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}