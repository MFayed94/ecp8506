{
  "hash": "53a326452d4e17654eb0d212181b661b",
  "result": {
    "engine": "knitr",
    "markdown": "# Model parameters {#sec-parameters}\n\n\n\n\n\n\n\n\n\n\nModel parameters are `name` / `value` pairs that are used _inside_ your model, \nbut they can be varied _outside_ the model. \n\nUnderstanding how mrgsolve handles model \"parameters\" particularly important \nfor generating interesting and robust simulations. \n\nBig picture\n\n- `mrgsolve` maintains a parameter list, including names and values\n  - This list is used by default if nothing else is done\n  - The parameter values in this list can be updated\n\n- `mrgsolve` will check input data sets for _columns_ which have the same \n  name as a parameter\n  - When a match is made between data set and parameter list, `mrgsolve`\n    will update the value based on what is passed on the data\n  - Parameters in `idata` are checked (and parameter list  updated) first; \n    after that, the data set is checked (and parameter list updated)\n\n## Coding model parameters\n\nTraditionally, we've used the `$PARAM` block to set parameter names and values\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n$PARAM \nWT = 70, SEX = 0, EGFR = 100\n```\n:::\n\n\n\n\nNew in mrgsolve 1.2.0, you can use the `$INPUT` block. This is another way\nto specify parameters, but they will have a special _tag_ on them that we can \nuse later. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n$INPUT \nWT = 70, SEX = 0, EGFR = 100\n```\n:::\n\n\n\n\n\nIt's best if you can set these to sensible values; specifically, set to \nthe _reference_ value in your covariate model.\n\n## Updating parameter values\n\nYou can't change the name or number of parameters after you compile the model, \nbut you can change the value. \n\nYou can update parameters either \n\n- _prior to_ simulation or \n- _during_ simulation\n\nWe will illustrate with this model\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- mread(\"parameters.mod\", project = here(\"model\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nBuilding parameters_mod ... done.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nparam(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n Model parameters (N=8):\n name   value . name   value \n EGFR   100   | THETA3 0.262 \n SEX    0     | THETA4 0.331 \n THETA1 0     | THETA5 -0.211\n THETA2 3     | WT     70    \n```\n\n\n:::\n:::\n\n\n\n\nThere parameters are: \n\n- `WT`\n- `SEX`\n- `EGFR`\n- `THETA1` ... `THETA5`\n\n::: {.callout-note collapse=true appearance=\"simple\"}\n# See model code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n$PLUGIN autodec\n\n$INPUT\nWT   =  70\nSEX  =   0\nEGFR = 100\n\n$PARAM\nTHETA1 = log(1)\nTHETA2 = log(20)\nTHETA3 = log(1.3)\nTHETA4 = 0.331\nTHETA5 = log(0.81)\n\n$PK\nMU_1 = THETA1 + 0.75*log(WT/70.0) + THETA4*log(EGFR/100.0) + THETA5*SEX;\nCL   = exp(MU_1 + ETA(1));\n\nMU_2 = THETA2 * 1.00*log(WT/70.0);\nV    = exp(MU_2 + ETA(2));\n\nMU_3 = THETA3;\nKA   = exp(MU_3 + ETA(3));\n\n$OMEGA 0.1 0.2 0.5\n\n$PKMODEL cmt = \"A1,A2\", depot = TRUE\n\n$ERROR \ncapture CP = A2/V;\n\n$CAPTURE WT CL\n```\n:::\n\n\n\n:::\n\n### Update _prior to_  simulation\n\n\nUse `param()` to update the model object. You can do this in one of two ways. \n\n#### Update with `name=value`\n\nThe first way is to pass the new value with the parameter name you want to \nchange. To change `WT`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod$WT\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 70\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- param(mod, WT = 80)\n\nmod$WT\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 80\n```\n\n\n:::\n:::\n\n\n\n\nAnd when we simulate, \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmrgsim(mod) %>% plot(\"WT\")\n```\n\n::: {.cell-output-display}\n![](parameters_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\nYou can also do this via `update()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- update(mod, param = list(WT = 60))\n\nmod$WT\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 60\n```\n\n\n:::\n:::\n\n\n\n\nRemember that `mrgsim()` passes to `update()` so you can do the same thing\nwith \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nout <- mrgsim(mod, param = list(WT = 70))\n```\n:::\n\n\n\n\nThis will generate simulated output with `WT` set to 70\n\n### Update with object\n\nIf you have a named object, you can pass that in to the update \nas well. For example, pass in a named list\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- list(WT = 70.2, FOO = 1)\n\nmod <- param(mod, p)\n\nmod$WT\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 70.2\n```\n\n\n:::\n:::\n\n\n\n\nOr a data frame\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data.frame(WT = c(70, 80.1), BAR = 2)\n\nmod <- param(mod, data[2,])\n\nmod$WT\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 80.1\n```\n\n\n:::\n:::\n\n\n\n\n**This will be a very important pattern we'll do later on**\n\n\n## Update _during_  simulation \n\nIn this approach, we'll add a columns to our input data set\nwith the same names as our parameters and let `mrgsolve`\npick up the new values. \n\n\n\nTo illustrate, load a data set from which to simulate\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read.csv(here(\"data/parameters-data.csv\"))\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  ID TIME AMT CMT WT SEX EGFR EVID\n1  1    0 100   1 60   0   60    1\n2  2    0 100   1 70   0   60    1\n3  3    0 100   1 80   0   60    1\n```\n\n\n:::\n:::\n\n\n\n\n- Subjects 1, 2, and 3 have different (increasing) weight\n- All subjects have `SEX=0`\n- All subjects have `EGFR=60`\n\n\nWhen we pass this data frame for simulation and plot\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nout <- \n  mod %>% \n  data_set(data) %>%\n  zero_re() %>% \n  mrgsim(delta = 0.1, end = 6)\n\nplot(out, \"WT,CP\")\n```\n\n::: {.cell-output-display}\n![](parameters_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nAll of this _only_ works if the names in the data set\nmatch up with the names in the model. \n\n## Check if the names match\n\nRecall that we coded the model covariates using `$INPUT`, rather \nthan `$PARAM`?\n\nWe can see that these parameters have this special tag\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparam_tags(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  name   tag\n1   WT input\n2  SEX input\n3 EGFR input\n```\n\n\n:::\n:::\n\n\n\n\nThey have the `input` tag, which means we expect to find them on the data set\n_when we ask_.\n\n\nWe can check this data set against the parameters in the model\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_data_names(data, mod)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFound all expected parameter names in `data`.\n```\n\n\n:::\n:::\n\n\n\n\n\nNow, modify the data set so it has `eGFR` rather than `EGFR`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2 <- rename(data, eGFR = EGFR)\n\ncheck_data_names(data2, mod)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Could not find the following parameter names in `data`:\n• EGFR (input)\nℹ Please check names in `data` against names in the parameter list.\n```\n\n\n:::\n:::\n",
    "supporting": [
      "parameters_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}