{
  "hash": "601bd89b33c79d784213f8f7d4489347",
  "result": {
    "engine": "knitr",
    "markdown": "# Validation\n\n\n\n\n\n\n\n\n\nThere are easy ways to validate the model you coded when you have a finished\nNONMEM run. \n\nOutputs from the finished NONMEM run provide reference values and simulations\nfrom `mrgsolve` provide test values which are compared against the reference.\n\n__Recommendation__\n\n- Have a dedicated script setup to validate your models or\n- Put some validation code at the top of your VPC script\n\n\n## Validate using `PRED`\n\nFirst, load the `mrgsolve` model that you want to validate\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrunno <- 106\n\nmod <- mread(here(glue(\"model/pk/{runno}.mrgsolve\")))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required namespace: xml2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nBuilding 106_mrgsolve ... done.\n```\n\n\n:::\n:::\n\n\n\n\nNext load in the model estimation data set.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncsv <- read_csv(here(\"data/derived/analysis3.csv\"), na = \".\")\n\nhead(csv, n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 34\n  C       NUM    ID  TIME   SEQ   CMT  EVID   AMT    DV   AGE    WT    HT  EGFR\n  <lgl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 NA        1     1  0        0     1     1     5   0    28.0  55.2  160.  114.\n2 NA        2     1  0.61     1     2     0    NA  61.0  28.0  55.2  160.  114.\n3 NA        3     1  1.15     1     2     0    NA  91.0  28.0  55.2  160.  114.\n# ℹ 21 more variables: ALB <dbl>, BMI <dbl>, SEX <dbl>, AAG <dbl>, SCR <dbl>,\n#   AST <dbl>, ALT <dbl>, CP <dbl>, TAFD <dbl>, TAD <dbl>, LDOS <dbl>,\n#   MDV <dbl>, BLQ <dbl>, PHASE <dbl>, STUDYN <dbl>, DOSE <dbl>, SUBJ <dbl>,\n#   USUBJID <chr>, STUDY <chr>, ACTARM <chr>, RF <chr>\n```\n\n\n:::\n:::\n\n\n\n\nNext, load the table file that contains `PRED`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntab <- read_table(here(glue(\"model/pk/{runno}/{runno}.tab\")), skip = 1)\nhead(tab, n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 8\n    NUM IPRED   NPDE  CWRES    DV  PRED    RES   WRES\n  <dbl> <dbl>  <dbl>  <dbl> <dbl> <dbl>  <dbl>  <dbl>\n1     1   0    0      0       0     0    0      0    \n2     2  68.5 -0.633 -0.512  61.0  60.6  0.422 -0.533\n3     3  90.8  0.403  0.126  91.0  78.5 12.4    0.142\n```\n\n\n:::\n:::\n\n\n\n\nNow join them together with `tab` on the left; the `NUM` column provides a key \nto join these two\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- left_join(tab, csv, by = \"NUM\")\n\nhead(data, n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 41\n    NUM IPRED   NPDE  CWRES  DV.x  PRED    RES   WRES C        ID  TIME   SEQ\n  <dbl> <dbl>  <dbl>  <dbl> <dbl> <dbl>  <dbl>  <dbl> <lgl> <dbl> <dbl> <dbl>\n1     1   0    0      0       0     0    0      0     NA        1  0        0\n2     2  68.5 -0.633 -0.512  61.0  60.6  0.422 -0.533 NA        1  0.61     1\n3     3  90.8  0.403  0.126  91.0  78.5 12.4    0.142 NA        1  1.15     1\n# ℹ 29 more variables: CMT <dbl>, EVID <dbl>, AMT <dbl>, DV.y <dbl>, AGE <dbl>,\n#   WT <dbl>, HT <dbl>, EGFR <dbl>, ALB <dbl>, BMI <dbl>, SEX <dbl>, AAG <dbl>,\n#   SCR <dbl>, AST <dbl>, ALT <dbl>, CP <dbl>, TAFD <dbl>, TAD <dbl>,\n#   LDOS <dbl>, MDV <dbl>, BLQ <dbl>, PHASE <dbl>, STUDYN <dbl>, DOSE <dbl>,\n#   SUBJ <dbl>, USUBJID <chr>, STUDY <chr>, ACTARM <chr>, RF <chr>\n```\n\n\n:::\n:::\n\n\n\n\nNow, simulate from this data set after turning off all the random effects. We \nalso bring `EVID` and `PRED` into the output to help post-processing\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nout <- \n  mod %>% \n  zero_re() %>% \n  obsonly() %>% \n  mrgsim(data = data, recover = \"NM = PRED\", output = \"df\", digits = 5)\n\nhead(out, n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  ID TIME     GUT   CENT   PERIPH     CL    V2  IPRED      Y     NM\n1  1 0.61 1.93350 2.9359 0.064811 3.0305 48.46 60.583 60.583 60.583\n2  1 1.15 0.83383 3.8064 0.177380 3.0305 48.46 78.548 78.548 78.548\n3  1 1.73 0.33787 4.0241 0.312270 3.0305 48.46 83.040 83.040 83.040\n```\n\n\n:::\n:::\n\n\n\n\nNotice, too, we limited the number of output digits to 5 (what NONMEM is \ngiving).\n\nNow, we have the NONMEM-generated `PRED` in the data as `NM` (the reference)\nand we can pick between `IPRED` and `Y` as the test. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(out$NM, out$IPRED)\n```\n\n::: {.cell-output-display}\n![](validation_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsummary(out$NM - out$IPRED)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n```\n\n\n:::\n:::\n\n\n\n\nThis `mrgsolve` model gives identical result.\n\n\n## Validate using `IPRED`\n\nMore recent versions of `mrgsolve` also allow you to validate by `IPRED`. \n\nRead in an additional table that contain the post-hoc ETA values\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntab <- read_table(\n  here(glue(\"model/pk/{runno}/{runno}par.tab\")), \n  na = '.', skip = 1\n)\netas <- select(tab, matches(\"NUM|ETA\"))\n```\n:::\n\n\n\n\nand we join this to the data set\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- left_join(data, etas, by = \"NUM\")\n```\n:::\n\n\n\n\nNow, we simulate with the `etasrc` option set to `data.all` and recovering \n`IPRED` into the output\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nout <- mrgsim(\n  mod, \n  data, \n  etasrc = \"data.all\", \n  obsonly = TRUE, \n  recover = \"NMIPRED = IPRED, NMPRED = PRED\", \n  digits = 5\n)\n```\n:::\n\n\n\n\n\nAnd summarize again\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(out$IPRED, out$NMIPRED)\n```\n\n::: {.cell-output-display}\n![](validation_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsummary(100*(out$IPRED - out$NMIPRED)/out$NMIPRED)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      Min.    1st Qu.     Median       Mean    3rd Qu.       Max. \n-8.861e-03  0.000e+00  0.000e+00  4.452e-05  0.000e+00  9.092e-03 \n```\n\n\n:::\n:::\n",
    "supporting": [
      "validation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}